var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API Reference","title":"API","text":"","category":"section"},{"location":"api/#Cosmos.Maybe","page":"API Reference","title":"Cosmos.Maybe","text":"Useful alias for type definition. To prevent conflicts, this is not exported.\n\n\n\n\n\n","category":"type"},{"location":"api/#Cosmos.defaultCosmologyRef","page":"API Reference","title":"Cosmos.defaultCosmologyRef","text":"Define global variable to hold information about the default cosmological model.\n\n\n\n\n\n","category":"constant"},{"location":"api/#Cosmos.AbstractDistanceMeasure","page":"API Reference","title":"Cosmos.AbstractDistanceMeasure","text":"Abstract supertype for distance measurements. Sub-types include:  . DistanceComoving,  . DistanceLightTravel, . DistanceAngularDiameter, . DistanceComovingTransverse, . DistanceLuminosity.\n\n\n\n\n\n","category":"type"},{"location":"api/#Cosmos.AbstractTimeMeasure","page":"API Reference","title":"Cosmos.AbstractTimeMeasure","text":"Abstract supertype for time measurements. Sub-types include:  . TimeLookback, . TimeConformal.\n\n\n\n\n\n","category":"type"},{"location":"api/#Cosmos.CosmologicalModel","page":"API Reference","title":"Cosmos.CosmologicalModel","text":"General struct to hold a Cosmology.jl object of type AbstractCosmology. It exposes the relevant cosmological parameters and adds new ones. The equation of state follows the Chevallier-Polarski-Linder parametrisation: \n\t\"Accelerating Universes with Scaling Dark Matter\" \n\tM. Chevallier and D. Polarski \n\tInternational Journal of Modern Physics D 10 (2001) 213. \n\thttps://arxiv.org/abs/gr-qc/0009008 \n\thttps://doi.org/10.1142/S0218271801000822 \n\t\n\t\"Exploring the Expansion History of the Universe\" \n\tE. Linder \n\tPhysical Review Letters 90 (2003) 091301. \n\thttps://doi.org/10.1103/PhysRevLett.90.091301 \n\t\nThe default constructors can be built using only the first 3 or 4 parameters.\n\nMembers\n\n. h [Real]: dimensionless Hubble constant \n. Ωm [Real]: matter density \n. Ωr [Real]: radiation density \n. Ωk [Real]: curvature density \n. ΩΛ [Real]: dark energy density \n. Ωb [Real]: baryon density (set to -1 if unavailable) \n. Nν [Real]: number of effective neutrino species (defaults to 3) \n. Tcmb [Real]: CMB temperature at present time (defaults to 2.7255 K, following Planck) \n. wEOSΛ [NTuple{2, Real}]: tuple with parameters of the equation of state for dark energy: w = w_0 + w_a (1 - a) \n. cosmology [AbstractCosmology]: object fromCosmology.jl` \n. toRedshift [Dict{Symbol, Function}]: functions to convert distance/time to redshift (:comoving, :lightTravel, :angularDiameter,:transverseComoving, :luminosity, :lookback, :conformal) \n. fromRedshift::Dict{Symbol, Function}: functions to convert distance/time from redshift (:comoving, :lightTravel, :angularDiameter, :transverseComoving, :luminosity, :lookback, :conformal) \n. zArray [Vector{T}]: array of values of redshift to build distance/time conversion functions; if nothing defaults to built-in values \n\n\nExamples\n\n\t# define parameters\n\tTcmb = 2.7255\n\th = 0.69\n\tΩΛ = 0.7099\n\tΩk = 0.\n\tΩm = 0.29\n\tΩr = 1. - ΩΛ - Ωk - Ωm\n\tNν = 3.04\n\t\n\t# some constructors\n\tcosmo1 = CosmologicalModel(Cosmology.FlatLCDM{Float64}(h, ΩΛ, Ωm, Ωr); Nν = Nν, Tcmb = Tcmb)\n\tcosmo2 = CosmologicalModel(h, Ωm; Tcmb = Tcmb,  Nν = Nν) # assumes Ωr = 0\n\tcosmo3 = CosmologicalModel(h, Ωm, Ωk; Tcmb = Tcmb,  Nν = Nν) # if geometry is not flat and Ωr = 0\n\tcosmo4 = CosmologicalModel(h, Ωm, Ωk, Ωr; Tcmb = Tcmb,  Nν = Nν) # includes radiation and non-flat geometry \n\nTo do\n\n. Consider taking Unitful quantities. \n. Should this struct be immutable?\n\n\n\n\n\n\n","category":"type"},{"location":"api/#Cosmos.DistanceAngularDiameter","page":"API Reference","title":"Cosmos.DistanceAngularDiameter","text":"Convenient object to help with distance measures conversions. The angular diameter distance is the ratio of an object's transverse length to its angular size. It relates to the transverse comoving distance in the following way:   da = dm / (1 + z)\n\nFor more information see: \t\"Distance measures in cosmology\" \n\nD. Hogg \n\narXiv:astro-ph/9905116\n\nInput\n\n. cosmology::CosmologicalModel: the cosmological model to be used as reference \n. d::Length{T}: the distance \n\n\n\n\n\n\n","category":"type"},{"location":"api/#Cosmos.DistanceAngularDiameter-Union{Tuple{Cosmos.DistanceComovingTransverse}, Tuple{D}} where D","page":"API Reference","title":"Cosmos.DistanceAngularDiameter","text":"Constructor for DistanceAngularDiameter{D} from Cosmos.DistanceComovingTransverse. It essentially convert from Cosmos.DistanceComovingTransverse to DistanceAngularDiameter. It ultimately enables conversion implicit conversions and the usage of the operator |>.\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.DistanceAngularDiameter-Union{Tuple{DistanceComoving}, Tuple{D}} where D","page":"API Reference","title":"Cosmos.DistanceAngularDiameter","text":"Constructor for DistanceAngularDiameter{D} from DistanceComoving. It essentially convert from DistanceComoving to DistanceAngularDiameter. It ultimately enables conversion implicit conversions and the usage of the operator |>.\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.DistanceAngularDiameter-Union{Tuple{DistanceLightTravel}, Tuple{D}} where D","page":"API Reference","title":"Cosmos.DistanceAngularDiameter","text":"Constructor for DistanceAngularDiameter{D} from DistanceLightTravel. It essentially convert from DistanceLightTravel to DistanceAngularDiameter. It ultimately enables conversion implicit conversions and the usage of the operator |>.\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.DistanceAngularDiameter-Union{Tuple{DistanceLuminosity}, Tuple{D}} where D","page":"API Reference","title":"Cosmos.DistanceAngularDiameter","text":"Constructor for DistanceAngularDiameter{D} from DistanceLuminosity. It essentially convert from DistanceLuminosity to DistanceAngularDiameter. It ultimately enables conversion implicit conversions and the usage of the operator |>.\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.DistanceComoving","page":"API Reference","title":"Cosmos.DistanceComoving","text":"Convenient object to help with distance measures conversions. The comoving distance is the distance between any two points in the reference frame of the Hubble flow. This is defined as:    dc = RH ∫ dz / E(z)  between any two points z1 and z2.\n\nFor more information see: \t\"Distance measures in cosmology\" \n\nD. Hogg \n\narXiv:astro-ph/9905116\n\nInput\n\n. cosmology::CosmologicalModel: the cosmological model to be used as reference \n. d::Length{T}: the distance \n\n\n\n\n\n\n","category":"type"},{"location":"api/#Cosmos.DistanceComoving-Union{Tuple{Cosmos.DistanceComovingTransverse}, Tuple{D}} where D","page":"API Reference","title":"Cosmos.DistanceComoving","text":"Constructor for DistanceComoving{D} from Cosmos.DistanceComovingTransverse. It essentially convert from Cosmos.DistanceComovingTransverse to DistanceComoving. It ultimately enables conversion implicit conversions and the usage of the operator |>.\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.DistanceComoving-Union{Tuple{DistanceAngularDiameter}, Tuple{D}} where D","page":"API Reference","title":"Cosmos.DistanceComoving","text":"Constructor for DistanceComoving{D} from DistanceAngularDiameter. It essentially convert from DistanceAngularDiameter to DistanceComoving. It ultimately enables conversion implicit conversions and the usage of the operator |>.\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.DistanceComoving-Union{Tuple{DistanceLightTravel}, Tuple{D}} where D","page":"API Reference","title":"Cosmos.DistanceComoving","text":"Constructor for DistanceComoving{D} from DistanceLightTravel. It essentially convert from DistanceLightTravel to DistanceComoving. It ultimately enables conversion implicit conversions and the usage of the operator |>.\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.DistanceComoving-Union{Tuple{DistanceLuminosity}, Tuple{D}} where D","page":"API Reference","title":"Cosmos.DistanceComoving","text":"Constructor for DistanceComoving{D} from DistanceLuminosity. It essentially convert from DistanceLuminosity to DistanceComoving. It ultimately enables conversion implicit conversions and the usage of the operator |>.\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.DistanceComovingTransverse","page":"API Reference","title":"Cosmos.DistanceComovingTransverse","text":"Convenient object to help with distance measures conversions. For two objects at the same redshift separated by a given angle, the transverse comoving distance depends on the curvature:   dm = dc\tif  Ωk=0   dm = RH sinh(sqrt(|Ωk|) dc / RH) / sqrt(|Ωk|) \totherwise\n\nFor more information see: \t\"Distance measures in cosmology\" \n\nD. Hogg \n\narXiv:astro-ph/9905116\n\nInput\n\n. cosmology::CosmologicalModel: the cosmological model to be used as reference \n. d::Length{T}: the distance \n\n\n\n\n\n\n","category":"type"},{"location":"api/#Cosmos.DistanceComovingTransverse-Union{Tuple{DistanceAngularDiameter}, Tuple{D}} where D","page":"API Reference","title":"Cosmos.DistanceComovingTransverse","text":"Constructor for Cosmos.DistanceComovingTransverse{D} from DistanceAngularDiameter. It essentially convert from DistanceAngularDiameter to Cosmos.DistanceComovingTransverse. It ultimately enables conversion implicit conversions and the usage of the operator |>.\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.DistanceComovingTransverse-Union{Tuple{DistanceComoving}, Tuple{D}} where D","page":"API Reference","title":"Cosmos.DistanceComovingTransverse","text":"Constructor for Cosmos.DistanceComovingTransverse{D} from DistanceComoving. It essentially convert from DistanceComoving to Cosmos.DistanceComovingTransverse. It ultimately enables conversion implicit conversions and the usage of the operator |>.\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.DistanceComovingTransverse-Union{Tuple{DistanceLightTravel}, Tuple{D}} where D","page":"API Reference","title":"Cosmos.DistanceComovingTransverse","text":"Constructor for Cosmos.DistanceComovingTransverse{D} from DistanceLightTravel. It essentially convert from DistanceLightTravel to Cosmos.DistanceComovingTransverse. It ultimately enables conversion implicit conversions and the usage of the operator |>.\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.DistanceComovingTransverse-Union{Tuple{DistanceLuminosity}, Tuple{D}} where D","page":"API Reference","title":"Cosmos.DistanceComovingTransverse","text":"Constructor for Cosmos.DistanceComovingTransverse{D} from DistanceLuminosity. It essentially convert from DistanceLuminosity to Cosmos.DistanceComovingTransverse. It ultimately enables conversion implicit conversions and the usage of the operator |>.\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.DistanceLightTravel","page":"API Reference","title":"Cosmos.DistanceLightTravel","text":"Convenient object to help with distance measures conversions. The light-travel distance corresponds to the time light from a given object would take to reach an observer.\n\nFor more information see: \t\"Distance measures in cosmology\" \n\nD. Hogg \n\narXiv:astro-ph/9905116\n\nInput\n\n. cosmology::CosmologicalModel: the cosmological model to be used as reference \n. d::Length{T}: the distance \n\n\n\n\n\n\n","category":"type"},{"location":"api/#Cosmos.DistanceLightTravel-Union{Tuple{Cosmos.DistanceComovingTransverse}, Tuple{D}} where D","page":"API Reference","title":"Cosmos.DistanceLightTravel","text":"Constructor for DistanceLightTravel{D} from Cosmos.DistanceComovingTransverse. It essentially convert from Cosmos.DistanceComovingTransverse to DistanceLightTravel. It ultimately enables conversion implicit conversions and the usage of the operator |>.\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.DistanceLightTravel-Union{Tuple{DistanceAngularDiameter}, Tuple{D}} where D","page":"API Reference","title":"Cosmos.DistanceLightTravel","text":"Constructor for DistanceLightTravel{D} from DistanceAngularDiameter. It essentially convert from DistanceAngularDiameter to DistanceLightTravel. It ultimately enables conversion implicit conversions and the usage of the operator |>.\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.DistanceLightTravel-Union{Tuple{DistanceComoving}, Tuple{D}} where D","page":"API Reference","title":"Cosmos.DistanceLightTravel","text":"Constructor for DistanceLightTravel{D} from DistanceComoving. It essentially convert from DistanceComoving to DistanceLightTravel. It ultimately enables conversion implicit conversions and the usage of the operator |>.\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.DistanceLightTravel-Union{Tuple{DistanceLuminosity}, Tuple{D}} where D","page":"API Reference","title":"Cosmos.DistanceLightTravel","text":"Constructor for DistanceLightTravel{D} from DistanceLuminosity. It essentially convert from DistanceLuminosity to DistanceLightTravel. It ultimately enables conversion implicit conversions and the usage of the operator |>.\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.DistanceLuminosity","page":"API Reference","title":"Cosmos.DistanceLuminosity","text":"Convenient object to help with distance measures conversions. The luminosity distance is related to the flux (Φ) and the bolometric luminosity (L) as:   d_L = sqrt(L / 4πΦ) .\n\nFor more information see: \t\"Distance measures in cosmology\" \n\nD. Hogg \n\narXiv:astro-ph/9905116\n\nInput\n\n. cosmology::CosmologicalModel: the cosmological model to be used as reference \n. d::Length{T}: the distance \n\n\n\n\n\n\n","category":"type"},{"location":"api/#Cosmos.DistanceLuminosity-Union{Tuple{Cosmos.DistanceComovingTransverse}, Tuple{D}} where D","page":"API Reference","title":"Cosmos.DistanceLuminosity","text":"Constructor for DistanceLuminosity{D} from Cosmos.DistanceComovingTransverse. It essentially convert from Cosmos.DistanceComovingTransverse to DistanceLuminosity. It ultimately enables conversion implicit conversions and the usage of the operator |>.\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.DistanceLuminosity-Union{Tuple{DistanceAngularDiameter}, Tuple{D}} where D","page":"API Reference","title":"Cosmos.DistanceLuminosity","text":"Constructor for DistanceLuminosity{D} from DistanceAngularDiameter. It essentially convert from DistanceAngularDiameter to DistanceLuminosity. It ultimately enables conversion implicit conversions and the usage of the operator |>.\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.DistanceLuminosity-Union{Tuple{DistanceComoving}, Tuple{D}} where D","page":"API Reference","title":"Cosmos.DistanceLuminosity","text":"Constructor for DistanceLuminosity{D} from DistanceComoving. It essentially convert from DistanceComoving to DistanceLuminosity. It ultimately enables conversion implicit conversions and the usage of the operator |>.\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.DistanceLuminosity-Union{Tuple{DistanceLightTravel}, Tuple{D}} where D","page":"API Reference","title":"Cosmos.DistanceLuminosity","text":"Constructor for DistanceLuminosity{D} from DistanceLightTravel. It essentially convert from DistanceLightTravel to DistanceLuminosity. It ultimately enables conversion implicit conversions and the usage of the operator |>.\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.Redshift","page":"API Reference","title":"Cosmos.Redshift","text":"Convenient object to handle redshifts.\n\n\n\n\n\n","category":"type"},{"location":"api/#Cosmos.ScaleFactor","page":"API Reference","title":"Cosmos.ScaleFactor","text":"Convenient object to handle scale factors.\n\n\n\n\n\n","category":"type"},{"location":"api/#Cosmos.TimeConformal","page":"API Reference","title":"Cosmos.TimeConformal","text":"Convenient object to help with time measures conversions. This is the time in the frame of the Hubble flow. It is defined as:    t_c = ∫ dt / a(t)  between any two points z1 and z2.\n\nFor more information see: \t\"Distance measures in cosmology\". \tD. Hogg \tarXiv:astro-ph/9905116\n\nInput\n\n. cosmology::CosmologicalModel: the cosmological model to be used as reference \n. t::Time{T}: the time \n\n\n\n\n\n\n","category":"type"},{"location":"api/#Cosmos.TimeConformal-Union{Tuple{TimeLookback}, Tuple{T}} where T","page":"API Reference","title":"Cosmos.TimeConformal","text":"convert(TimeType, time)\n\nType conversion from TimeLookback to TimeConformal. It ultimately enables conversion implicit conversions and the usage of the operator |>.\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.TimeLookback","page":"API Reference","title":"Cosmos.TimeLookback","text":"Convenient object to help with time measures conversions. The lookback time distance corresponds to the time difference between the universe's age at t2 and t1.   tl = tH ∫ dz / E(z) / (1 + z) \n\nFor more information see: \t\"Distance measures in cosmology\". \tD. Hogg \tarXiv:astro-ph/9905116\n\nInput\n\n. cosmology::CosmologicalModel: the cosmological model to be used as reference \n. t::Time{T}: the time \n\n\n\n\n\n\n","category":"type"},{"location":"api/#Cosmos.TimeLookback-Union{Tuple{TimeConformal}, Tuple{T}} where T","page":"API Reference","title":"Cosmos.TimeLookback","text":"convert(TimeType, time)\n\nType conversion from TimeConformal to TimeLookback. It ultimately enables conversion implicit conversions and the usage of the operator |>.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.:==-Tuple{Redshift, Redshift}","page":"API Reference","title":"Base.:==","text":"Operations with Redshift.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.:==-Tuple{ScaleFactor, ScaleFactor}","page":"API Reference","title":"Base.:==","text":"Operations with ScaleFactor.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.:==-Union{Tuple{T2}, Tuple{T1}, Tuple{C2}, Tuple{C1}, Tuple{CosmologicalModel{C1, T1}, CosmologicalModel{C2, T2}}} where {C1, C2, T1, T2}","page":"API Reference","title":"Base.:==","text":"Object equality comparison.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{A}, Tuple{Type{ScaleFactor{A}}, Cosmos.DistanceComovingTransverse}} where A","page":"API Reference","title":"Base.convert","text":"convert(ScaleFactor, distance)\n\nType conversion from Cosmos.DistanceComovingTransverse to ScaleFactor. These conversions assume distances/times with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{A}, Tuple{Type{ScaleFactor{A}}, DistanceAngularDiameter}} where A","page":"API Reference","title":"Base.convert","text":"convert(ScaleFactor, distance)\n\nType conversion from DistanceAngularDiameter to ScaleFactor. These conversions assume distances/times with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{A}, Tuple{Type{ScaleFactor{A}}, DistanceComoving}} where A","page":"API Reference","title":"Base.convert","text":"convert(ScaleFactor, distance)\n\nType conversion from DistanceComoving to ScaleFactor. These conversions assume distances/times with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{A}, Tuple{Type{ScaleFactor{A}}, DistanceLightTravel}} where A","page":"API Reference","title":"Base.convert","text":"convert(ScaleFactor, distance)\n\nType conversion from DistanceLightTravel to ScaleFactor. These conversions assume distances/times with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{A}, Tuple{Type{ScaleFactor{A}}, DistanceLuminosity}} where A","page":"API Reference","title":"Base.convert","text":"convert(ScaleFactor, distance)\n\nType conversion from DistanceLuminosity to ScaleFactor. These conversions assume distances/times with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{A}, Tuple{Type{ScaleFactor{A}}, TimeConformal}} where A","page":"API Reference","title":"Base.convert","text":"convert(ScaleFactor, distance)\n\nType conversion from TimeConformal to ScaleFactor. These conversions assume distances/times with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{A}, Tuple{Type{ScaleFactor{A}}, TimeLookback}} where A","page":"API Reference","title":"Base.convert","text":"convert(ScaleFactor, distance)\n\nType conversion from TimeLookback to ScaleFactor. These conversions assume distances/times with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{D1}, Tuple{Type{Cosmos.DistanceComovingTransverse{D1}}, DistanceAngularDiameter}} where D1","page":"API Reference","title":"Base.convert","text":"convert(DistanceType, distance)\n\nType conversion from DistanceAngularDiameter to Cosmos.DistanceComovingTransverse. This function performs no type checks. It assumes that the underlying CosmologicalModel is the same for both. These conversions assume distances with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{D1}, Tuple{Type{Cosmos.DistanceComovingTransverse{D1}}, DistanceComoving}} where D1","page":"API Reference","title":"Base.convert","text":"convert(DistanceType, distance)\n\nType conversion from DistanceComoving to Cosmos.DistanceComovingTransverse. This function performs no type checks. It assumes that the underlying CosmologicalModel is the same for both. These conversions assume distances with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{D1}, Tuple{Type{Cosmos.DistanceComovingTransverse{D1}}, DistanceLightTravel}} where D1","page":"API Reference","title":"Base.convert","text":"convert(DistanceType, distance)\n\nType conversion from DistanceLightTravel to Cosmos.DistanceComovingTransverse. This function performs no type checks. It assumes that the underlying CosmologicalModel is the same for both. These conversions assume distances with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{D1}, Tuple{Type{Cosmos.DistanceComovingTransverse{D1}}, DistanceLuminosity}} where D1","page":"API Reference","title":"Base.convert","text":"convert(DistanceType, distance)\n\nType conversion from DistanceLuminosity to Cosmos.DistanceComovingTransverse. This function performs no type checks. It assumes that the underlying CosmologicalModel is the same for both. These conversions assume distances with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{D1}, Tuple{Type{DistanceAngularDiameter{D1}}, Cosmos.DistanceComovingTransverse}} where D1","page":"API Reference","title":"Base.convert","text":"convert(DistanceType, distance)\n\nType conversion from Cosmos.DistanceComovingTransverse to DistanceAngularDiameter. This function performs no type checks. It assumes that the underlying CosmologicalModel is the same for both. These conversions assume distances with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{D1}, Tuple{Type{DistanceAngularDiameter{D1}}, DistanceComoving}} where D1","page":"API Reference","title":"Base.convert","text":"convert(DistanceType, distance)\n\nType conversion from DistanceComoving to DistanceAngularDiameter. This function performs no type checks. It assumes that the underlying CosmologicalModel is the same for both. These conversions assume distances with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{D1}, Tuple{Type{DistanceAngularDiameter{D1}}, DistanceLightTravel}} where D1","page":"API Reference","title":"Base.convert","text":"convert(DistanceType, distance)\n\nType conversion from DistanceLightTravel to DistanceAngularDiameter. This function performs no type checks. It assumes that the underlying CosmologicalModel is the same for both. These conversions assume distances with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{D1}, Tuple{Type{DistanceAngularDiameter{D1}}, DistanceLuminosity}} where D1","page":"API Reference","title":"Base.convert","text":"convert(DistanceType, distance)\n\nType conversion from DistanceLuminosity to DistanceAngularDiameter. This function performs no type checks. It assumes that the underlying CosmologicalModel is the same for both. These conversions assume distances with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{D1}, Tuple{Type{DistanceComoving{D1}}, Cosmos.DistanceComovingTransverse}} where D1","page":"API Reference","title":"Base.convert","text":"convert(DistanceType, distance)\n\nType conversion from Cosmos.DistanceComovingTransverse to DistanceComoving. This function performs no type checks. It assumes that the underlying CosmologicalModel is the same for both. These conversions assume distances with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{D1}, Tuple{Type{DistanceComoving{D1}}, DistanceAngularDiameter}} where D1","page":"API Reference","title":"Base.convert","text":"convert(DistanceType, distance)\n\nType conversion from DistanceAngularDiameter to DistanceComoving. This function performs no type checks. It assumes that the underlying CosmologicalModel is the same for both. These conversions assume distances with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{D1}, Tuple{Type{DistanceComoving{D1}}, DistanceLightTravel}} where D1","page":"API Reference","title":"Base.convert","text":"convert(DistanceType, distance)\n\nType conversion from DistanceLightTravel to DistanceComoving. This function performs no type checks. It assumes that the underlying CosmologicalModel is the same for both. These conversions assume distances with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{D1}, Tuple{Type{DistanceComoving{D1}}, DistanceLuminosity}} where D1","page":"API Reference","title":"Base.convert","text":"convert(DistanceType, distance)\n\nType conversion from DistanceLuminosity to DistanceComoving. This function performs no type checks. It assumes that the underlying CosmologicalModel is the same for both. These conversions assume distances with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{D1}, Tuple{Type{DistanceLightTravel{D1}}, Cosmos.DistanceComovingTransverse}} where D1","page":"API Reference","title":"Base.convert","text":"convert(DistanceType, distance)\n\nType conversion from Cosmos.DistanceComovingTransverse to DistanceLightTravel. This function performs no type checks. It assumes that the underlying CosmologicalModel is the same for both. These conversions assume distances with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{D1}, Tuple{Type{DistanceLightTravel{D1}}, DistanceAngularDiameter}} where D1","page":"API Reference","title":"Base.convert","text":"convert(DistanceType, distance)\n\nType conversion from DistanceAngularDiameter to DistanceLightTravel. This function performs no type checks. It assumes that the underlying CosmologicalModel is the same for both. These conversions assume distances with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{D1}, Tuple{Type{DistanceLightTravel{D1}}, DistanceComoving}} where D1","page":"API Reference","title":"Base.convert","text":"convert(DistanceType, distance)\n\nType conversion from DistanceComoving to DistanceLightTravel. This function performs no type checks. It assumes that the underlying CosmologicalModel is the same for both. These conversions assume distances with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{D1}, Tuple{Type{DistanceLightTravel{D1}}, DistanceLuminosity}} where D1","page":"API Reference","title":"Base.convert","text":"convert(DistanceType, distance)\n\nType conversion from DistanceLuminosity to DistanceLightTravel. This function performs no type checks. It assumes that the underlying CosmologicalModel is the same for both. These conversions assume distances with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{D1}, Tuple{Type{DistanceLuminosity{D1}}, Cosmos.DistanceComovingTransverse}} where D1","page":"API Reference","title":"Base.convert","text":"convert(DistanceType, distance)\n\nType conversion from Cosmos.DistanceComovingTransverse to DistanceLuminosity. This function performs no type checks. It assumes that the underlying CosmologicalModel is the same for both. These conversions assume distances with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{D1}, Tuple{Type{DistanceLuminosity{D1}}, DistanceAngularDiameter}} where D1","page":"API Reference","title":"Base.convert","text":"convert(DistanceType, distance)\n\nType conversion from DistanceAngularDiameter to DistanceLuminosity. This function performs no type checks. It assumes that the underlying CosmologicalModel is the same for both. These conversions assume distances with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{D1}, Tuple{Type{DistanceLuminosity{D1}}, DistanceComoving}} where D1","page":"API Reference","title":"Base.convert","text":"convert(DistanceType, distance)\n\nType conversion from DistanceComoving to DistanceLuminosity. This function performs no type checks. It assumes that the underlying CosmologicalModel is the same for both. These conversions assume distances with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{D1}, Tuple{Type{DistanceLuminosity{D1}}, DistanceLightTravel}} where D1","page":"API Reference","title":"Base.convert","text":"convert(DistanceType, distance)\n\nType conversion from DistanceLightTravel to DistanceLuminosity. This function performs no type checks. It assumes that the underlying CosmologicalModel is the same for both. These conversions assume distances with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{S}, Tuple{Type{Cosmos.DistanceComovingTransverse{S}}, Redshift, CosmologicalModel}} where S","page":"API Reference","title":"Base.convert","text":"convert(DistanceComoving, redshift, cosmology)\nconvert(DistanceAngularDiameter, redshift, cosmology)\nconvert(DistanceLightTravel, redshift, cosmology)\nconvert(DistanceComovingTransverse, redshift, cosmology)\nconvert(DistanceLuminosity, redshift, cosmology)\n\nType conversion from Redshift to Cosmos.DistanceComovingTransverse. These conversions assume distances/times with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{S}, Tuple{Type{Cosmos.DistanceComovingTransverse{S}}, ScaleFactor, CosmologicalModel}} where S","page":"API Reference","title":"Base.convert","text":"convert(DistanceComoving, scaleFactor, cosmology)\nconvert(DistanceAngularDiameter, scaleFactor, cosmology)\nconvert(DistanceLightTravel, scaleFactor, cosmology)\nconvert(DistanceComovingTransverse, scaleFactor, cosmology)\nconvert(DistanceLuminosity, scaleFactor, cosmology)\n\nType conversion from ScaleFactor to Cosmos.DistanceComovingTransverse. These conversions assume distances/times with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{S}, Tuple{Type{DistanceAngularDiameter{S}}, Redshift, CosmologicalModel}} where S","page":"API Reference","title":"Base.convert","text":"convert(DistanceComoving, redshift, cosmology)\nconvert(DistanceAngularDiameter, redshift, cosmology)\nconvert(DistanceLightTravel, redshift, cosmology)\nconvert(DistanceComovingTransverse, redshift, cosmology)\nconvert(DistanceLuminosity, redshift, cosmology)\n\nType conversion from Redshift to DistanceAngularDiameter. These conversions assume distances/times with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{S}, Tuple{Type{DistanceAngularDiameter{S}}, ScaleFactor, CosmologicalModel}} where S","page":"API Reference","title":"Base.convert","text":"convert(DistanceComoving, scaleFactor, cosmology)\nconvert(DistanceAngularDiameter, scaleFactor, cosmology)\nconvert(DistanceLightTravel, scaleFactor, cosmology)\nconvert(DistanceComovingTransverse, scaleFactor, cosmology)\nconvert(DistanceLuminosity, scaleFactor, cosmology)\n\nType conversion from ScaleFactor to DistanceAngularDiameter. These conversions assume distances/times with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{S}, Tuple{Type{DistanceComoving{S}}, Redshift, CosmologicalModel}} where S","page":"API Reference","title":"Base.convert","text":"convert(DistanceComoving, redshift, cosmology)\nconvert(DistanceAngularDiameter, redshift, cosmology)\nconvert(DistanceLightTravel, redshift, cosmology)\nconvert(DistanceComovingTransverse, redshift, cosmology)\nconvert(DistanceLuminosity, redshift, cosmology)\n\nType conversion from Redshift to DistanceComoving. These conversions assume distances/times with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{S}, Tuple{Type{DistanceComoving{S}}, ScaleFactor, CosmologicalModel}} where S","page":"API Reference","title":"Base.convert","text":"convert(DistanceComoving, scaleFactor, cosmology)\nconvert(DistanceAngularDiameter, scaleFactor, cosmology)\nconvert(DistanceLightTravel, scaleFactor, cosmology)\nconvert(DistanceComovingTransverse, scaleFactor, cosmology)\nconvert(DistanceLuminosity, scaleFactor, cosmology)\n\nType conversion from ScaleFactor to DistanceComoving. These conversions assume distances/times with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{S}, Tuple{Type{DistanceLightTravel{S}}, Redshift, CosmologicalModel}} where S","page":"API Reference","title":"Base.convert","text":"convert(DistanceComoving, redshift, cosmology)\nconvert(DistanceAngularDiameter, redshift, cosmology)\nconvert(DistanceLightTravel, redshift, cosmology)\nconvert(DistanceComovingTransverse, redshift, cosmology)\nconvert(DistanceLuminosity, redshift, cosmology)\n\nType conversion from Redshift to DistanceLightTravel. These conversions assume distances/times with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{S}, Tuple{Type{DistanceLightTravel{S}}, ScaleFactor, CosmologicalModel}} where S","page":"API Reference","title":"Base.convert","text":"convert(DistanceComoving, scaleFactor, cosmology)\nconvert(DistanceAngularDiameter, scaleFactor, cosmology)\nconvert(DistanceLightTravel, scaleFactor, cosmology)\nconvert(DistanceComovingTransverse, scaleFactor, cosmology)\nconvert(DistanceLuminosity, scaleFactor, cosmology)\n\nType conversion from ScaleFactor to DistanceLightTravel. These conversions assume distances/times with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{S}, Tuple{Type{DistanceLuminosity{S}}, Redshift, CosmologicalModel}} where S","page":"API Reference","title":"Base.convert","text":"convert(DistanceComoving, redshift, cosmology)\nconvert(DistanceAngularDiameter, redshift, cosmology)\nconvert(DistanceLightTravel, redshift, cosmology)\nconvert(DistanceComovingTransverse, redshift, cosmology)\nconvert(DistanceLuminosity, redshift, cosmology)\n\nType conversion from Redshift to DistanceLuminosity. These conversions assume distances/times with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{S}, Tuple{Type{DistanceLuminosity{S}}, ScaleFactor, CosmologicalModel}} where S","page":"API Reference","title":"Base.convert","text":"convert(DistanceComoving, scaleFactor, cosmology)\nconvert(DistanceAngularDiameter, scaleFactor, cosmology)\nconvert(DistanceLightTravel, scaleFactor, cosmology)\nconvert(DistanceComovingTransverse, scaleFactor, cosmology)\nconvert(DistanceLuminosity, scaleFactor, cosmology)\n\nType conversion from ScaleFactor to DistanceLuminosity. These conversions assume distances/times with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{S}, Tuple{Type{TimeConformal{S}}, Redshift, CosmologicalModel}} where S","page":"API Reference","title":"Base.convert","text":"convert(DistanceComoving, redshift, cosmology)\nconvert(DistanceAngularDiameter, redshift, cosmology)\nconvert(DistanceLightTravel, redshift, cosmology)\nconvert(DistanceComovingTransverse, redshift, cosmology)\nconvert(DistanceLuminosity, redshift, cosmology)\n\nType conversion from Redshift to TimeConformal. These conversions assume distances/times with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{S}, Tuple{Type{TimeConformal{S}}, ScaleFactor, CosmologicalModel}} where S","page":"API Reference","title":"Base.convert","text":"convert(DistanceComoving, scaleFactor, cosmology)\nconvert(DistanceAngularDiameter, scaleFactor, cosmology)\nconvert(DistanceLightTravel, scaleFactor, cosmology)\nconvert(DistanceComovingTransverse, scaleFactor, cosmology)\nconvert(DistanceLuminosity, scaleFactor, cosmology)\n\nType conversion from ScaleFactor to TimeConformal. These conversions assume distances/times with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{S}, Tuple{Type{TimeLookback{S}}, Redshift, CosmologicalModel}} where S","page":"API Reference","title":"Base.convert","text":"convert(DistanceComoving, redshift, cosmology)\nconvert(DistanceAngularDiameter, redshift, cosmology)\nconvert(DistanceLightTravel, redshift, cosmology)\nconvert(DistanceComovingTransverse, redshift, cosmology)\nconvert(DistanceLuminosity, redshift, cosmology)\n\nType conversion from Redshift to TimeLookback. These conversions assume distances/times with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{S}, Tuple{Type{TimeLookback{S}}, ScaleFactor, CosmologicalModel}} where S","page":"API Reference","title":"Base.convert","text":"convert(DistanceComoving, scaleFactor, cosmology)\nconvert(DistanceAngularDiameter, scaleFactor, cosmology)\nconvert(DistanceLightTravel, scaleFactor, cosmology)\nconvert(DistanceComovingTransverse, scaleFactor, cosmology)\nconvert(DistanceLuminosity, scaleFactor, cosmology)\n\nType conversion from ScaleFactor to TimeLookback. These conversions assume distances/times with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{T2}, Tuple{T1}, Tuple{Type{TimeConformal{T1}}, TimeLookback{T2}}} where {T1, T2}","page":"API Reference","title":"Base.convert","text":"convert(TimeType, time)\n\nType conversion from TimeLookback to TimeConformal. This function performs no type checks. It assumes that the underlying CosmologicalModel is the same for both. These conversions assume times with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{T2}, Tuple{T1}, Tuple{Type{TimeLookback{T1}}, TimeConformal{T2}}} where {T1, T2}","page":"API Reference","title":"Base.convert","text":"convert(TimeType, time)\n\nType conversion from TimeConformal to TimeLookback. This function performs no type checks. It assumes that the underlying CosmologicalModel is the same for both. These conversions assume times with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{T}, Tuple{Type{Cosmos.DistanceComovingTransverse{T}}, Cosmos.DistanceComovingTransverse}} where T","page":"API Reference","title":"Base.convert","text":"convert(DistanceType, distance)\n\nType conversions for Cosmos.DistanceComovingTransverse. This enables conversions between different distance measures (DistanceLightTravel, DistanceComoving, etc.) and the usage of the operator |>.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{T}, Tuple{Type{DistanceAngularDiameter{T}}, DistanceAngularDiameter}} where T","page":"API Reference","title":"Base.convert","text":"convert(DistanceType, distance)\n\nType conversions for DistanceAngularDiameter. This enables conversions between different distance measures (DistanceLightTravel, DistanceComoving, etc.) and the usage of the operator |>.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{T}, Tuple{Type{DistanceComoving{T}}, DistanceComoving}} where T","page":"API Reference","title":"Base.convert","text":"convert(DistanceType, distance)\n\nType conversions for DistanceComoving. This enables conversions between different distance measures (DistanceLightTravel, DistanceComoving, etc.) and the usage of the operator |>.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{T}, Tuple{Type{DistanceLightTravel{T}}, DistanceLightTravel}} where T","page":"API Reference","title":"Base.convert","text":"convert(DistanceType, distance)\n\nType conversions for DistanceLightTravel. This enables conversions between different distance measures (DistanceLightTravel, DistanceComoving, etc.) and the usage of the operator |>.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{T}, Tuple{Type{DistanceLuminosity{T}}, DistanceLuminosity}} where T","page":"API Reference","title":"Base.convert","text":"convert(DistanceType, distance)\n\nType conversions for DistanceLuminosity. This enables conversions between different distance measures (DistanceLightTravel, DistanceComoving, etc.) and the usage of the operator |>.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{T}, Tuple{Type{TimeConformal{T}}, TimeConformal}} where T","page":"API Reference","title":"Base.convert","text":"convert(DistanceType, distance)\n\nType conversions for TimeConformal. This enables conversions between different distance measures (DistanceLightTravel, DistanceComoving, etc.) and the usage of the operator |>.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{T}, Tuple{Type{TimeLookback{T}}, TimeLookback}} where T","page":"API Reference","title":"Base.convert","text":"convert(DistanceType, distance)\n\nType conversions for TimeLookback. This enables conversions between different distance measures (DistanceLightTravel, DistanceComoving, etc.) and the usage of the operator |>.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{U}, Tuple{T}, Tuple{C}, Tuple{Type{T}, CosmologicalModel{C, U}}} where {C, T<:Real, U}","page":"API Reference","title":"Base.convert","text":"Type conversion.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{U}, Tuple{T}, Tuple{Type{T}, Cosmology.ClosedLCDM{U}}} where {T<:Real, U}","page":"API Reference","title":"Base.convert","text":"Useful extensions of Cosmology.jlto enable type conversion related toCosmology.ClosedLCDM`.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{U}, Tuple{T}, Tuple{Type{T}, Cosmology.ClosedWCDM{U}}} where {T<:Real, U}","page":"API Reference","title":"Base.convert","text":"Useful extensions of Cosmology.jlto enable type conversion related toCosmology.ClosedWCDM`.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{U}, Tuple{T}, Tuple{Type{T}, Cosmology.FlatLCDM{U}}} where {T<:Real, U}","page":"API Reference","title":"Base.convert","text":"Useful extensions of Cosmology.jlto enable type conversion related toCosmology.FlatLCDM`.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{U}, Tuple{T}, Tuple{Type{T}, Cosmology.FlatWCDM{U}}} where {T<:Real, U}","page":"API Reference","title":"Base.convert","text":"Useful extensions of Cosmology.jlto enable type conversion related toCosmology.FlatWCDM`.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{U}, Tuple{T}, Tuple{Type{T}, Cosmology.OpenLCDM{U}}} where {T<:Real, U}","page":"API Reference","title":"Base.convert","text":"Useful extensions of Cosmology.jlto enable type conversion related toCosmology.OpenLCDM`.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{U}, Tuple{T}, Tuple{Type{T}, Cosmology.OpenWCDM{U}}} where {T<:Real, U}","page":"API Reference","title":"Base.convert","text":"Useful extensions of Cosmology.jlto enable type conversion related toCosmology.OpenWCDM`.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{Z}, Tuple{Type{Redshift{Z}}, Cosmos.DistanceComovingTransverse}} where Z","page":"API Reference","title":"Base.convert","text":"convert(Redshift, distance)\n\nType conversion from Cosmos.DistanceComovingTransverse to Redshift. These conversions assume distances/times with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{Z}, Tuple{Type{Redshift{Z}}, DistanceAngularDiameter}} where Z","page":"API Reference","title":"Base.convert","text":"convert(Redshift, distance)\n\nType conversion from DistanceAngularDiameter to Redshift. These conversions assume distances/times with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{Z}, Tuple{Type{Redshift{Z}}, DistanceComoving}} where Z","page":"API Reference","title":"Base.convert","text":"convert(Redshift, distance)\n\nType conversion from DistanceComoving to Redshift. These conversions assume distances/times with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{Z}, Tuple{Type{Redshift{Z}}, DistanceLightTravel}} where Z","page":"API Reference","title":"Base.convert","text":"convert(Redshift, distance)\n\nType conversion from DistanceLightTravel to Redshift. These conversions assume distances/times with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{Z}, Tuple{Type{Redshift{Z}}, DistanceLuminosity}} where Z","page":"API Reference","title":"Base.convert","text":"convert(Redshift, distance)\n\nType conversion from DistanceLuminosity to Redshift. These conversions assume distances/times with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{Z}, Tuple{Type{Redshift{Z}}, TimeConformal}} where Z","page":"API Reference","title":"Base.convert","text":"convert(Redshift, distance)\n\nType conversion from TimeConformal to Redshift. These conversions assume distances/times with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.convert-Union{Tuple{Z}, Tuple{Type{Redshift{Z}}, TimeLookback}} where Z","page":"API Reference","title":"Base.convert","text":"convert(Redshift, distance)\n\nType conversion from TimeLookback to Redshift. These conversions assume distances/times with respect to present time (z=0).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.eltype-Tuple{CosmologicalModel}","page":"API Reference","title":"Base.eltype","text":"Get type of values contained in CosmologicalModel object.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.eltype-Tuple{Cosmology.AbstractCosmology}","page":"API Reference","title":"Base.eltype","text":"Get the underlying data type of an AbstractCosmology object (from Cosmology.jl).\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.eltype-Union{Tuple{Redshift{Z}}, Tuple{Z}} where Z","page":"API Reference","title":"Base.eltype","text":"eltype(redshift)\neltype(scaleFactor)\n\nGet data type.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.promote_rule-Union{Tuple{T2}, Tuple{T1}, Tuple{C}, Tuple{Type{CosmologicalModel{C, T1}}, Type{CosmologicalModel{C, T2}}}} where {C, T1, T2}","page":"API Reference","title":"Base.promote_rule","text":"Promotion rules.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.promote_rule-Union{Tuple{U}, Tuple{T}, Tuple{Type{Cosmology.ClosedLCDM{T}}, Type{Cosmology.ClosedLCDM{U}}}} where {T, U}","page":"API Reference","title":"Base.promote_rule","text":"Useful extensions of Cosmology.jl implementing promotion rules.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.promote_rule-Union{Tuple{U}, Tuple{T}, Tuple{Type{Cosmology.ClosedWCDM{T}}, Type{Cosmology.ClosedWCDM{U}}}} where {T, U}","page":"API Reference","title":"Base.promote_rule","text":"Useful extensions of Cosmology.jl implementing promotion rules.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.promote_rule-Union{Tuple{U}, Tuple{T}, Tuple{Type{Cosmology.FlatLCDM{T}}, Type{Cosmology.FlatLCDM{U}}}} where {T, U}","page":"API Reference","title":"Base.promote_rule","text":"Useful extensions of Cosmology.jl implementing promotion rules.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.promote_rule-Union{Tuple{U}, Tuple{T}, Tuple{Type{Cosmology.FlatWCDM{T}}, Type{Cosmology.FlatWCDM{U}}}} where {T, U}","page":"API Reference","title":"Base.promote_rule","text":"Useful extensions of Cosmology.jl implementing promotion rules.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.promote_rule-Union{Tuple{U}, Tuple{T}, Tuple{Type{Cosmology.OpenLCDM{T}}, Type{Cosmology.OpenLCDM{U}}}} where {T, U}","page":"API Reference","title":"Base.promote_rule","text":"Useful extensions of Cosmology.jl implementing promotion rules.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.promote_rule-Union{Tuple{U}, Tuple{T}, Tuple{Type{Cosmology.OpenWCDM{T}}, Type{Cosmology.OpenWCDM{U}}}} where {T, U}","page":"API Reference","title":"Base.promote_rule","text":"Useful extensions of Cosmology.jl implementing promotion rules.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.promote_rule-Union{Tuple{U}, Tuple{T}, Tuple{Type{Cosmos.DistanceComovingTransverse{T}}, Type{Cosmos.DistanceComovingTransverse{U}}}} where {T, U}","page":"API Reference","title":"Base.promote_rule","text":"Promotion rules conversions for Cosmos.DistanceComovingTransverse.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.promote_rule-Union{Tuple{U}, Tuple{T}, Tuple{Type{DistanceAngularDiameter{T}}, Type{DistanceAngularDiameter{U}}}} where {T, U}","page":"API Reference","title":"Base.promote_rule","text":"Promotion rules conversions for DistanceAngularDiameter.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.promote_rule-Union{Tuple{U}, Tuple{T}, Tuple{Type{DistanceComoving{T}}, Type{DistanceComoving{U}}}} where {T, U}","page":"API Reference","title":"Base.promote_rule","text":"Promotion rules conversions for DistanceComoving.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.promote_rule-Union{Tuple{U}, Tuple{T}, Tuple{Type{DistanceLightTravel{T}}, Type{DistanceLightTravel{U}}}} where {T, U}","page":"API Reference","title":"Base.promote_rule","text":"Promotion rules conversions for DistanceLightTravel.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.promote_rule-Union{Tuple{U}, Tuple{T}, Tuple{Type{DistanceLuminosity{T}}, Type{DistanceLuminosity{U}}}} where {T, U}","page":"API Reference","title":"Base.promote_rule","text":"Promotion rules conversions for DistanceLuminosity.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.promote_rule-Union{Tuple{U}, Tuple{T}, Tuple{Type{TimeConformal{T}}, Type{TimeConformal{U}}}} where {T, U}","page":"API Reference","title":"Base.promote_rule","text":"Promotion rules conversions for TimeConformal.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.promote_rule-Union{Tuple{U}, Tuple{T}, Tuple{Type{TimeLookback{T}}, Type{TimeLookback{U}}}} where {T, U}","page":"API Reference","title":"Base.promote_rule","text":"Promotion rules conversions for TimeLookback.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.show-Tuple{IO, CosmologicalModel}","page":"API Reference","title":"Base.show","text":"@show(io, cosmology)\nprint(io, cosmology)\nprintln(io, cosmology)\n\nDisplay information of CosmologicalModel types.\n\nInput\n\n. io [IO]: IO-type objects with standard output \n. cosmology [CosmologicalModel]: the cosmological model object \n\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.show-Tuple{IO, Cosmos.AbstractDistanceMeasure}","page":"API Reference","title":"Base.show","text":"@show(io, d)\nprint(io, d)\nprintln(io, d)\n\nDisplay information about AbstractDistanceMeasure types. Note that distances are cosmology-dependent, but this information is not displayed.\n\nInput\n\n. io [IO]: IO-type objects with standard output \n. d [AbstractDistanceMeasure]: a distance object \n\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.show-Tuple{IO, Cosmos.AbstractTimeMeasure}","page":"API Reference","title":"Base.show","text":"@show(io, t)\nprint(io, t)\nprintln(io, t)\n\nDisplay information about AbstractTimeMeasure types. Note that times are cosmology-dependent, but this information is not displayed.\n\nInput\n\n. io [IO]: IO-type objects with standard output \n. t [AbstractTimeMeasure]: the time measure \n\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.show-Tuple{IO, Redshift}","page":"API Reference","title":"Base.show","text":"@show(io, z)\nprint(io, z)\nprintln(io, z)\n\nDisplay information of Redshift types.\n\nInput\n\n. io [IO]: IO-type objects with standard output \n. z [Redshift]: the redshift \n\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.show-Tuple{IO, ScaleFactor}","page":"API Reference","title":"Base.show","text":"@show(io, a)\nprint(io, a)\nprintln(io, a)\n\nDisplay information about ScaleFactor types.\n\nInput\n\n. io [IO]: IO-type objects with standard output \n. a [ScaleFactor]: the scale factor \n\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.CosmologyPlanck-Tuple{}","page":"API Reference","title":"Cosmos.CosmologyPlanck","text":"Latest Planck's cosmology. This is based on: \t\"Planck 2018 results. VI. Cosmological parameters\" \tPlanck Collaboration \tAstronomy and Astrophysics 641 (2020) A6. \thttps://arxiv.org/abs/1807.06209 \thttps://doi.org/10.1051/0004-6361/201833910\n\nInput\n\n. z::Maybe{AbstractVector}: vectors at which the redshifts will be sampled (for interpolating distance measures) \n. T::Type: type of the data (defaults to Float64) \n\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.ageOfUniverse-Tuple{CosmologicalModel}","page":"API Reference","title":"Cosmos.ageOfUniverse","text":"ageOfUniverse(cosmo)\nageOfUniverse(cosmo, z)\n\nComputes the Hubble distance for a given cosmology and possibly at a given redshift.\n\nInput\n\n. cosmo [CosmologicalModel]: the cosmological model \n. z [Real]: the redshift \n\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.comovingElement-Tuple{CosmologicalModel, Float64}","page":"API Reference","title":"Cosmos.comovingElement","text":"comovingElement(cosmology, z)\ncomovingElement(cosmology, a)\n\nCalculates the comoving line element at a given redshift. This is Hogg's eq. 28 adjusted.\n\nNOTE: check nomenclature.\n\nInput\n\n. cosmo [CosmologicalModel]: the cosmological model \n. z [Real]: the redshift \n. z [Redshift]: the redshift (of type Redshift) \n. a [ScaleFactor]: the scale factor type \n\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.comovingVolume-Tuple{CosmologicalModel, Real}","page":"API Reference","title":"Cosmos.comovingVolume","text":"comovingVolume(cosmology, z)\n\nCalculates the comoving volume at a given redshift.\n\nInput\n\n. cosmo [CosmologicalModel]: the cosmological model \n. z [Real]: the redshift \n\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.comovingVolumeElement-Tuple{CosmologicalModel, Real}","page":"API Reference","title":"Cosmos.comovingVolumeElement","text":"comovingVolumeElement(cosmology, z)\n\nCalculates the comoving volume element at a given redshift.\n\nInput\n\n. cosmo [CosmologicalModel]: the cosmological model \n. z [Real]: the redshift \n\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.computeBaryonDensity-Tuple{CosmologicalModel}","page":"API Reference","title":"Cosmos.computeBaryonDensity","text":"computeBaryonDensity(cosmology; z = 0.)\n\nComputes the density of matter in the universe at a given redshift:\n\n\trho_textb = Omega_textb rho_textc\n\nInput\n\n. cosmology::CosmologicalModel: the cosmological model of interest \\\n. z::Real: the redshift at which to compute the density \\\n\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.computeCriticalDensity-Tuple{CosmologicalModel}","page":"API Reference","title":"Cosmos.computeCriticalDensity","text":"computeCriticalDensity(cosmology; z = 0.)\n\nComputes the critical density of the universe at a given redshift:\n\n\trho_textc = 3 dfrac3 H^2(z)8 pi G\n\nInput\n\n. cosmology::CosmologicalModel: the cosmological model of interest \\\n. z::Real: the redshift at which to compute the density \\\n\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.computeCurvatureDensity-Tuple{CosmologicalModel}","page":"API Reference","title":"Cosmos.computeCurvatureDensity","text":"computeCurvatureDensity(cosmology; z = 0.)\n\nComputes the density of matter in the universe at a given redshift:\n\n\trho_textk = Omega_textk rho_textc\n\nInput\n\n. cosmology::CosmologicalModel: the cosmological model of interest \\\n. z::Real: the redshift at which to compute the density \\\n\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.computeDarkEnergyDensity-Tuple{CosmologicalModel}","page":"API Reference","title":"Cosmos.computeDarkEnergyDensity","text":"computeDarkEnergyDensity(cosmology; z = 0.)\n\nComputes the density of matter in the universe at a given redshift:\n\n\trho_textLambda = Omega_Lambda rho_textc\n\nInput\n\n. cosmology::CosmologicalModel: the cosmological model of interest \\\n. z::Real: the redshift at which to compute the density \\\n\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.computeMatterDensity-Tuple{CosmologicalModel}","page":"API Reference","title":"Cosmos.computeMatterDensity","text":"computeMatterDensity(cosmology; z = 0.)\n\nComputes the density of matter in the universe at a given redshift:\n\n\trho_textm = Omega_textm rho_textc\n\nInput\n\n. cosmology::CosmologicalModel: the cosmological model of interest \\\n. z::Real: the redshift at which to compute the density \\\n\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.computeRadiationDensity-Tuple{CosmologicalModel}","page":"API Reference","title":"Cosmos.computeRadiationDensity","text":"computeRadiationDensity(cosmology; z = 0.)\n\nComputes the density of matter in the universe at a given redshift:\n\n\trho_textr = Omega_textr rho_textc\n\nInput\n\n. cosmology::CosmologicalModel: the cosmological model of interest \\\n. z::Real: the redshift at which to compute the density \\\n\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.conversionsFromRedshift-Tuple{Cosmology.AbstractCosmology}","page":"API Reference","title":"Cosmos.conversionsFromRedshift","text":"Helper function (unexported) to iniatilise conversions of distance or time to/from redshift.\n\nTo do\n\n. Consider speeding up building this function using @threads\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.dimensionlessHubbleParameter-Tuple{CosmologicalModel, Real}","page":"API Reference","title":"Cosmos.dimensionlessHubbleParameter","text":"dimensionlessHubbleParameter(cosmology, z)\n\nCompute the dimensionless Hubble parameter (often dubbed E): E(z) = fracH(z)H(0) sqrtOmega_r (1 + z)^4 + Omega_m (1 + z)^3 + Omega_k (1 + z)^2 + Omega_Lambda This follows the definition from Peebles 1993 (p. ~310-322), adopted by Hogg, arXiv:astro-ph/9905116.\n\nInput\n\n. cosmo [CosmologicalModel]: the cosmological model \n. z [Real]: the redshift \n\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.hubbleConstant-Tuple{CosmologicalModel}","page":"API Reference","title":"Cosmos.hubbleConstant","text":"hubbleConstant(cosmology, z)\n\nCompute the present-day Hubble constant.\n\nInput\n\n. cosmo [CosmologicalModel]: the cosmological model \n\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.hubbleDistance-Tuple{CosmologicalModel}","page":"API Reference","title":"Cosmos.hubbleDistance","text":"hubbleDistance(cosmo)\nhubbleDistance(cosmo, z)\n\nComputes the Hubble distance for a given cosmology and possibly at a given redshift.\n\nInput\n\n. cosmo [CosmologicalModel]: the cosmological model \n. z [Real]: the redshift \n\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.hubbleParameter-Tuple{CosmologicalModel, Real}","page":"API Reference","title":"Cosmos.hubbleParameter","text":"hubbleParameter(cosmology, z)\n\nCompute the Hubble parameter H(z).\n\nInput\n\n. cosmo [CosmologicalModel]: the cosmological model \n. z [Real]: the redshift \n\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.hubbleTime-Tuple{CosmologicalModel}","page":"API Reference","title":"Cosmos.hubbleTime","text":"hubbleTime(cosmo)\nhubbleTime(cosmo, z)\n\nComputes the Hubble distance for a given cosmology and possibly at a given redshift.\n\nInput\n\n. cosmo [CosmologicalModel]: the cosmological model \n. z [Real]: the redshift \n\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.isClosed-Tuple{CosmologicalModel}","page":"API Reference","title":"Cosmos.isClosed","text":"isClosed(cosmology)\n\nDetermine whether a CosmologicalModel has a closed geometry.\n\nInput\n\n. cosmol::CosmologicalModel: the cosmological model\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.isCold-Tuple{CosmologicalModel}","page":"API Reference","title":"Cosmos.isCold","text":"isCold(cosmology)\n\nDetermine whether a CosmologicalModel is described by cold dark matter.\n\nInput\n\n. cosmol::CosmologicalModel: the cosmological model\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.isFlat-Tuple{CosmologicalModel}","page":"API Reference","title":"Cosmos.isFlat","text":"isFlat(cosmology)\n\nDetermine whether a CosmologicalModel has a flat geometry.\n\nInput\n\n. cosmol::CosmologicalModel: the cosmological model\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.isOpen-Tuple{CosmologicalModel}","page":"API Reference","title":"Cosmos.isOpen","text":"isOpen(cosmology)\n\nDetermine whether a CosmologicalModel has an open geometry.\n\nInput\n\n. cosmol::CosmologicalModel: the cosmological model\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.isWarm-Tuple{CosmologicalModel}","page":"API Reference","title":"Cosmos.isWarm","text":"isWarm(cosmology)\n\nDetermine whether a CosmologicalModel is described by warm dark matter.\n\nInput\n\n. cosmol::CosmologicalModel: the cosmological model\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.prepareRedshiftSamples-Tuple{Type{<:Real}}","page":"API Reference","title":"Cosmos.prepareRedshiftSamples","text":"prepareRedshiftSamples(T::Type{<: Real})\n\nPrepare a set of redshift samples for cosmological calculations. This function generates a range of redshift values, including negative, small, and large redshifts, to cover a wide range of cosmological scenarios. The redshift values are returned as a unique array of type T.\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.scaleFactor-Tuple{CosmologicalModel, Real}","page":"API Reference","title":"Cosmos.scaleFactor","text":"scaleFactor(z)\n\nCompute the scale factor for a given cosmology.  This should be the same for all cosmologies, by definition, but passing this argument fixes the correct type.\n\nInput\n\n. cosmo [CosmologicalModel]: the cosmological model \n. z [Real]: the redshift \n\n\n\n\n\n\n","category":"method"},{"location":"api/#Cosmos.setDefaultCosmology-Tuple{Any}","page":"API Reference","title":"Cosmos.setDefaultCosmology","text":"Set the value of the global default cosmological model. This will enable faster function calls.  For instances, instead of d = DistanceComovingTransverse(1., cosmology), the second argument will become the default value.\n\n\n\n\n\n","category":"method"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Planck-2018-cosmological-parameters","page":"Examples","title":"Planck 2018 cosmological parameters","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using Cosmos\n\ncosmology = CosmologyPlanck()\nprint(cosmology)","category":"page"},{"location":"examples/#Distance/Time-Measures","page":"Examples","title":"Distance/Time Measures","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"It enables efficient conversion of distance and time measures in cosmology. ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"d = DistanceComoving(cosmology, 1000. * u\"Mpc\")\nz1 = d |> Redshift \nz2 = convert(Redshift, d) # alternative\na = z1 |> ScaleFactor\nD = convert(DistanceLuminosity, d)","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"It can also get a distance between two redshifts:","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"d = DistanceLightTravel(cosmology, Redshift(5.), Redshift(0.5))","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Note that while these conversions might be convenient and intuitive, they are not (necessarily) efficient. ","category":"page"},{"location":"installation/#Quick-start","page":"Installation","title":"Quick start","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"This package requires Julia 1.8. Older versions will not be supported.\n] add Cosmos\nusing Cosmos","category":"page"},{"location":"#Cosmos.jl","page":"Home","title":"Cosmos.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia package that wraps and extends Cosmology.jl to what I consider to be a more convenient form. Things should work, but the code has not yet been thoroughly tested.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This is largely based on Cosmology.jl, with some additions from: \"Distance Measures in Cosmology\", by D. W. Hogg, astro-ph/9905116.","category":"page"}]
}
